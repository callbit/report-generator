<?php

namespace App\Http\Controllers;

use App\Vulnerability;
use Illuminate\Http\Request;

class VulnerabilityController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        //
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        return view('addvulnerability');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $attributes = request()->validate([
            'vulName' => 'required|string',
            'vulDescription' => 'required|string',
            'vulRecomendation' => 'required|string',
            'vulReference' => 'required|string',
            'vulRisk' => 'required|string',
            'classification' => 'nullable|string',
            'tag' => 'nullable|string'



            ]);


            vulnerability::create($attributes);

            return back()->with('message', 'The new vulnerability was added on the database');
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\Vulnerability  $vulnerability
     * @return \Illuminate\Http\Response
     */
    public function show(Vulnerability $vulnerability)
    {
        $vuls  = vulnerability::latest()->orderBy('id', 'desc')->paginate(5);

        return view('allvuln')->withDetails($vuls);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \App\Vulnerability  $vulnerability
     * @return \Illuminate\Http\Response
     */
    public function edit(Request $request)
    {
        $id = $request->get('id');
        $vuls = vulnerability::where('id', '=', $id)->get();
        return view('editvulnerabilidade')->withDetails($vuls);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\Vulnerability  $vulnerability
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request)
    {
        $attributes = request()->validate([
            'id'  => 'required|string',
            'vulName' => 'required|string',
            'vulDescription' => 'required|string',
            'vulRecomendation' => 'required|string',
            'vulReference' => 'required|string',
            'vulRisk' => 'required|string',
            'classification' => 'nullable|string',
            'tag' => 'nullable|string'


        ]);

            if($attributes['classification'] == ''){
                $attributes['classification'] = ' ';
            }

            if($attributes['tag'] == ''){
                $attributes['tag'] = ' ';
            }

        vulnerability::find($attributes['id'])->update($attributes);

        return back()->with('status', 'Updated');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Vulnerability  $vulnerability
     * @return \Illuminate\Http\Response
     */
    public function destroy(Request $request, Vulnerability $vulnerability)
    {
        $attributes = request()->validate([
            'id'  => 'required|string',
        ]);



        vulnerability::find($attributes['id'])->destroy($attributes);

        return back()->with('status', 'The vulnerability Was removed');
    }
}
